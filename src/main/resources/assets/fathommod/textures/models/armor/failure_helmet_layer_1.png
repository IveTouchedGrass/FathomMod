// Made with Blockbench 4.9.4
// Exported for Minecraft version 1.17 or later with Mojang mappings
// Paste this class into your mod and generate all required imports


public class failure helmet<T extends Entity> extends EntityModel<T> {
	// This layer location should be baked with EntityRendererProvider.Context in the entity renderer and passed into this model's constructor
	public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation("modid", "failure_helmet"), "main");
	private final ModelPart Head;
	private final ModelPart Body;
	private final ModelPart RightArm;
	private final ModelPart LeftArm;
	private final ModelPart RightLeg;
	private final ModelPart LeftLeg;
	private final ModelPart Helmet;

	public failure helmet(ModelPart root) {
		this.Head = root.getChild("Head");
		this.Body = root.getChild("Body");
		this.RightArm = root.getChild("RightArm");
		this.LeftArm = root.getChild("LeftArm");
		this.RightLeg = root.getChild("RightLeg");
		this.LeftLeg = root.getChild("LeftLeg");
		this.Helmet = root.getChild("Helmet");
	}

	public static LayerDefinition createBodyLayer() {
		MeshDefinition meshdefinition = new MeshDefinition();
		PartDefinition partdefinition = meshdefinition.getRoot();

		PartDefinition Head = partdefinition.addOrReplaceChild("Head", CubeListBuilder.create(), PartPose.offset(0.0F, 0.0F, 0.0F));

		PartDefinition Body = partdefinition.addOrReplaceChild("Body", CubeListBuilder.create(), PartPose.offset(0.0F, 0.0F, 0.0F));

		PartDefinition RightArm = partdefinition.addOrReplaceChild("RightArm", CubeListBuilder.create(), PartPose.offset(-5.0F, 2.0F, 0.0F));

		PartDefinition LeftArm = partdefinition.addOrReplaceChild("LeftArm", CubeListBuilder.create(), PartPose.offset(5.0F, 2.0F, 0.0F));

		PartDefinition RightLeg = partdefinition.addOrReplaceChild("RightLeg", CubeListBuilder.create(), PartPose.offset(-1.9F, 12.0F, 0.0F));

		PartDefinition LeftLeg = partdefinition.addOrReplaceChild("LeftLeg", CubeListBuilder.create(), PartPose.offset(1.9F, 12.0F, 0.0F));

		PartDefinition Helmet = partdefinition.addOrReplaceChild("Helmet", CubeListBuilder.create().texOffs(7, 36).addBox(-4.5F, -32.05F, -4.46F, 9.0F, 0.0F, 9.0F, new CubeDeformation(0.0F))
		.texOffs(46, 23).addBox(-4.4F, -32.05F, -4.48F, 0.0F, 3.0F, 9.0F, new CubeDeformation(0.0F))
		.texOffs(46, 32).addBox(-4.4F, -29.05F, 1.52F, 0.0F, 2.0F, 3.0F, new CubeDeformation(0.0F))
		.texOffs(49, 33).addBox(-4.4F, -29.05F, -0.48F, 0.0F, 1.0F, 2.0F, new CubeDeformation(0.0F))
		.texOffs(53, 34).addBox(-4.4F, -29.05F, -3.48F, 0.0F, 2.0F, 1.0F, new CubeDeformation(0.0F))
		.texOffs(54, 34).addBox(-4.4F, -29.05F, -4.48F, 0.0F, 5.0F, 1.0F, new CubeDeformation(0.0F))
		.texOffs(54, 40).addBox(4.48F, -29.05F, -4.47F, 0.0F, 5.0F, 1.0F, new CubeDeformation(0.0F))
		.texOffs(44, 38).addBox(4.48F, -29.05F, -0.47F, 0.0F, 1.0F, 5.0F, new CubeDeformation(0.0F))
		.texOffs(52, 38).addBox(4.48F, -28.05F, 1.53F, 0.0F, 1.0F, 3.0F, new CubeDeformation(0.0F))
		.texOffs(46, 44).addBox(4.48F, -29.05F, -3.47F, 0.0F, 2.0F, 1.0F, new CubeDeformation(0.0F))
		.texOffs(46, 32).addBox(4.48F, -32.05F, -4.47F, 0.0F, 3.0F, 9.0F, new CubeDeformation(0.0F))
		.texOffs(46, 41).addBox(-4.5F, -32.05F, 4.52F, 9.0F, 5.0F, 0.0F, new CubeDeformation(0.0F))
		.texOffs(42, 46).addBox(-2.5F, -27.05F, 4.52F, 5.0F, 1.0F, 0.0F, new CubeDeformation(0.0F))
		.texOffs(1, 38).addBox(-4.5F, -32.05F, -4.43F, 9.0F, 2.0F, 0.0F, new CubeDeformation(0.0F))
		.texOffs(2, 2).addBox(2.5F, -30.15F, -4.43F, 2.0F, 1.0F, 0.0F, new CubeDeformation(0.0F))
		.texOffs(40, 4).addBox(3.5F, -29.15F, -4.43F, 1.0F, 5.0F, 0.0F, new CubeDeformation(0.0F))
		.texOffs(62, 14).addBox(2.5F, -25.15F, -4.43F, 1.0F, 1.0F, 0.0F, new CubeDeformation(0.0F))
		.texOffs(60, 38).addBox(-4.4F, -30.05F, -4.43F, 2.0F, 1.0F, 0.0F, new CubeDeformation(0.0F))
		.texOffs(45, 4).addBox(-4.4F, -29.05F, -4.43F, 1.0F, 5.0F, 0.0F, new CubeDeformation(0.0F))
		.texOffs(0, 54).addBox(-3.4F, -25.05F, -4.43F, 1.0F, 1.0F, 0.0F, new CubeDeformation(0.0F)), PartPose.offset(0.0F, 24.0F, 0.0F));

		return LayerDefinition.create(meshdefinition, 64, 64);
	}

	@Override
	public void setupAnim(T entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {

	}

	@Override
	public void renderToBuffer(PoseStack poseStack, VertexConsumer vertexConsumer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {
		Head.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
		Body.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
		RightArm.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
		LeftArm.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
		RightLeg.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
		LeftLeg.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
		Helmet.render(poseStack, vertexConsumer, packedLight, packedOverlay, red, green, blue, alpha);
	}
}